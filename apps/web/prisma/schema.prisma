// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User entity
model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  imageUrl  String?
  // Add more fields as needed, such as profile information, etc.
  UserRoom  UserRoom[]
  Message   Message[]
  Room      Room[]
}

// Define the Room entity
model Room {
  id        String     @id @default(uuid())
  name      String
  password  String?
  isPrivate Boolean?   @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  createdby User       @relation(fields: [userId], references: [id])
  // Define a many-to-many relationship between users and rooms
  UserRoom  UserRoom[]
  // Add more fields as needed, such as room settings, etc.
  Message   Message[]
  userId    String
}

// Define the UserRoom join table for the many-to-many relationship
model UserRoom {
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id])
  room   Room   @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

// Define the Message entity
model Message {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt
  // Define a many-to-one relationship between messages and users
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  // Define a many-to-one relationship between messages and rooms
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  // Add more fields as needed, such as message type, attachments, etc.

  @@map("messages")
}
